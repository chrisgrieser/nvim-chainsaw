*nvim-chainsaw.txt*          For Neovim          Last change: 2024 December 01

==============================================================================
Table of Contents                            *nvim-chainsaw-table-of-contents*

1. nvim-chainsaw                                |nvim-chainsaw-nvim-chainsaw-|
  - Table of Contents         |nvim-chainsaw-nvim-chainsaw--table-of-contents|
  - Features                           |nvim-chainsaw-nvim-chainsaw--features|
  - Installation                   |nvim-chainsaw-nvim-chainsaw--installation|
  - Built-in language support|nvim-chainsaw-nvim-chainsaw--built-in-language-support|
  - Usage                                 |nvim-chainsaw-nvim-chainsaw--usage|
  - Configuration                 |nvim-chainsaw-nvim-chainsaw--configuration|
  - Similar plugins             |nvim-chainsaw-nvim-chainsaw--similar-plugins|
  - About the developer     |nvim-chainsaw-nvim-chainsaw--about-the-developer|

==============================================================================
1. nvim-chainsaw                                *nvim-chainsaw-nvim-chainsaw-*



Quickand feature-rich insertion of various kinds of log statements.


<https://github.com/chrisgrieser/nvim-chainsaw/assets/73286100/fa55ae24-deba-4fed-84e9-554d9a695ad9>


TABLE OF CONTENTS             *nvim-chainsaw-nvim-chainsaw--table-of-contents*

- |nvim-chainsaw-features|
- |nvim-chainsaw-installation|
- |nvim-chainsaw-built-in-language-support|
- |nvim-chainsaw-usage|
    - |nvim-chainsaw-list-of-commands|
    - |nvim-chainsaw-smart-variable-detection|
    - |nvim-chainsaw-smart-insertion-locations|
- |nvim-chainsaw-configuration|
    - |nvim-chainsaw-basic-configuration|
    - |nvim-chainsaw-customize-log-statements|
    - |nvim-chainsaw-the-global-lua-function-`chainsaw`|
    - |nvim-chainsaw-make-the-formatter-ignore-the-log-statements|
    - |nvim-chainsaw-statusline|
- |nvim-chainsaw-similar-plugins|
- |nvim-chainsaw-about-the-developer|


FEATURES                               *nvim-chainsaw-nvim-chainsaw--features*

- Quick insertion of log statements for the variable under the cursor
    (normal mode) or the selection (visual mode).
- |nvim-chainsaw-smart-detection-of-the-variable-under-the-cursor|
    and the |nvim-chainsaw-correct-insertion-location-of-the-log-statement| via Treesitter.
- Commands for a dozen different log statement types, including assert
    statements, stacktraces, or acoustic logging. All commands are dot-repeatable.
- Builtin support for ~20 common languages, with dedicated support for
    `nvim-lua`, and easy configuration for additional languages.
- Helper commands to remove all log statements created by `nvim-chainsaw` or to
    clear the console.
- Flexible templating options for customizing log statements, including support
    for multi-line templates.
- Visual indication of log statements via highlights, signcolumn, or scrollbar
    (when using satellite.nvim <https://github.com/lewis6991/satellite.nvim>).


INSTALLATION                       *nvim-chainsaw-nvim-chainsaw--installation*

**Requirements** - nvim 0.10 or higher. - Recommended: Treesitter parser for
the respective languages to enable
|nvim-chainsaw-smart-variable-identification| and
|nvim-chainsaw-smart-insertion-locations|.

>lua
    -- lazy.nvim
    { 
        "chrisgrieser/nvim-chainsaw", 
        event = "VeryLazy",
        opts = {} -- required even if left empty
    },
    
    -- packer
    use { 
        "chrisgrieser/nvim-chainsaw"
        config = function () 
            require("chainsaw").setup()
        end,
    }
<


BUILT-IN LANGUAGE SUPPORT*nvim-chainsaw-nvim-chainsaw--built-in-language-support*

- JavaScript/TypeScript (and supersets)
- Python
- Lua (with special considerations for `nvim-lua`)
- Shell (and supersets)
- AppleScript
- Ruby
- Rust
- CSS (and supersets)
- Go

Not every language supports every type of log statement. For the concrete
statements used, see log-statements-data.lua
<./lua/chainsaw/config/log-statements-data.lua>.


USAGE                                     *nvim-chainsaw-nvim-chainsaw--usage*


LIST OF COMMANDS ~

The plugin offers various types of log statements. Bind keymaps for the ones
you want to use.

All operations are dot-repeatable.

>lua
    -- log the name & value of the variable under the cursor
    require("chainsaw").variableLog()
    
    -- like variableLog, but with syntax specific to inspect an object such as
    -- `console.log(JSON.stringify(foobar))` in javascript
    require("chainsaw").objectLog()
    
    -- inspect the type of the variable under cursor, such as `typeof foo` in js
    require("chainsaw").typeLog()
    
    -- assertion statement for variable under cursor
    require("chainsaw").assertLog()
    
    -- Minimal log statement, with an emoji for differentiation. Intended for
    -- control flow inspection, that is to quickly glance whether a condition was
    -- triggered or not.
    require("chainsaw").emojiLog()
    
    -- Sound-playing statement for audible debugging.
    -- Depending on the type of log statement, it is either a terminal bell
    -- (requiring the terminal) or a system sound.
    -- Inspired by https://news.ycombinator.com/item?id=41519046
    require("chainsaw").sound()
    
    -- create log statement, and position the cursor to enter a message
    require("chainsaw").messageLog()
    
    -- 1st call: start measuring the time
    -- 2nd call: logs the time duration since
    require("chainsaw").timeLog()
    
    -- debug statements like `debugger` in javascript or `breakpoint()` in python
    require("chainsaw").debugLog()
    
    -- prints the stacktrace of the current call
    require("chainsaw").stacktraceLog()
    
    -- clearing statement, such as `console.clear()`
    require("chainsaw").clearLog()
    
    ---------------------------------------------------
    
    -- remove all log statements created by nvim-chainsaw
    require("chainsaw").removeLogs()
<

These features can also be accessed with the user command `:Chainsaw`. Each
option corresponds to the commands above. For example, `:Chainsaw variableLog`
is same as `:lua require("chainsaw").variableLog()`.

When using lua functions, `variableLog`, `objectLog`, `typeLog`, and
`assertLog` can also be used in **visual mode** to use the visual selection
instead of the word under the cursor.


SMART VARIABLE DETECTION ~

When the variable under the cursor is an object with fields, `chainsaw`
attempts to automatically select the correct field. (Note that this feature
requires the Treesitter parser of the respective language.)

>lua
    myVariable.myF[i]eld = "foobar"
    -- prints: myVariable.myField
    
    myVa[r]iable.myField = "foobar"
    -- prints: myVariable
<

Filetypes currently supporting this feature: - Lua (and `nvim_lua`) - Python -
JavaScript (and supersets)

PRs adding support for more languages are welcome. See smart-var-detect.lua
<./lua/chainsaw/config/smart-var-detect.lua>.


SMART INSERTION LOCATIONS ~

`chainsaw` by default inserts the log statement below the cursor. The insertion
location is automatically adapted if doing would result in invalid code. (Note
that this feature requires the Treesitter parser of the respective language.)

>lua
    -- [] marks the cursor position
    
    -- default case: will insert the log statement below the cursor
    local f[o]obar = 1
    
    -- multi-line assignments: will insert log statement below the `}` line
    local f[o]o = {
        bar = 1
    }
    
    -- returns: will insert log statement above the `return` line
    local function foobar()
        return f[o]o
    end
<

Filetypes currently supporting this feature: - Lua (and `nvim_lua`) -
JavaScript (and supersets)

PRs adding support for more languages are welcome. See
smart-insert-location.lua <./lua/chainsaw/config/smart-insert-location.lua>.


CONFIGURATION                     *nvim-chainsaw-nvim-chainsaw--configuration*

The `setup()` call is required.


BASIC CONFIGURATION ~

>lua
    -- default settings
    require("chainsaw").setup {
        -- The marker should be a unique string, since signs and highlgiths are based
        -- on it and since `.removeLogs()` will remove any line with it. Thus, emojis
        -- or unique strings like "[Chainsaw]" are recommended.
        marker = "ü™ö",
    
        -- Appearance of lines with the marker
        visuals = {
            sign = "Û∞πà",
            statuslineIcon = "Û∞πà",
            notificationIcon = "Û∞πà",
            signHlgroup = "DiagnosticSignInfo",
            lineHlgroup = false,
    
            nvimSatelliteIntegration = {
                enabled = true,
                hlgroup = "DiagnosticSignInfo",
                icon = "‚ñ™",
                leftOfScrollbar = false,
                priority = 40, -- compared to other handlers (diagnostics are 50)
            },
        },
    
        -- configuration for specific logtypes
        logTypes = {
            emojiLog = {
                emojis = { "üîµ", "üü©", "‚≠ê", "‚≠ï", "üíú", "üî≤" },
            },
        },
    
        -- If a filetype has no configuration for a specific logtype, then it will
        -- look for the configuration for a superset of that filetype.
        supersets = {
            nvim_lua = "lua", -- `nvim_lua` config is used when in nvim-lua
            typescript = "javascript",
            typescriptreact = "typescript",
            javascriptreact = "javascript",
            vue = "typescript",
            svelte = "typescript",
            bash = "sh",
            zsh = "sh",
            fish = "sh",
            scss = "css",
            less = "css",
            sass = "css",
        },
    
        logStatements = require("chainsaw.config.log-statements-data"),
    }
<


CUSTOMIZE LOG STATEMENTS ~

New log statements can be added, and existing log statements can be modified
under the config `logStatements`. See log-statements-data.lua
<./lua/chainsaw/config/log-statements-data.lua> for the built-in log statements
as reference. PRs adding log statements for more languages are welcome.

There are various **placeholders** that are dynamically replaced: -
`{{marker}}` inserts the value from `config.marker`. Each log statement should
have one, so that the line can be removed via `.removeLogs()`. -
`{{var}}`variable as described further above. - `{{time}}`timestamp formatted
as `HH:MM:SS` (for millisecond-precision, use `.timeLog()` instead) -
`{{file}}`basename of the current file - `{{lnum}}`current line number -
_.emojiLog() only_`{{emoji}}` inserts the emoji - _.timeLog() only_`{{index}}`
inserts a running index. (Needed to differentiate between variables when using
`timeLog` multiple times).

>lua
    require("chainsaw").setup ({
        logStatements = {
            variableLog = {
                javascript = 'console.log("{{marker}} {{var}}:", {{var}});',
                otherFiletype = ‚Ä¶ -- <-- add the statement for your filetype here
            },
            -- the same way for the other log statement operations
        },
    })
<


  [!NOTE] The strings may not include line breaks. If you want to use multi-line
  log statements, use a list of strings instead, each string representing one
  line.

THE GLOBAL LUA FUNCTION CHAINSAW ~



**Experimental:** The plugin provides a globally accessible function
`Chainsaw`, specially designed for debugging `nvim_lua`. Given a variable, it
pretty-prints the variable, its name, its stacktrace, and the location of the
log statement call, all in a much more concise manner. When using snacks.nvim
<http://github.com/folke/snacks.nvim> as notification plugin, the notification
will also be syntax highlighted.

You can use it by setting a custom log statement like this:

>lua
    require("chainsaw").setup {
        logStatements = {
            variableLog = {
                nvim_lua = "Chainsaw({{var}}) -- {{marker}}",
            },
        },
<

The `lua_ls` diagnostic `undefined-global` can be disabled by adding it as a
global to the server config:

Options ~

>lua
    -- Option 1: nvim-lspconfig
    require("lspconfig").lua_ls.setup {
        settings = {
            Lua = {
                diagnostics = {
                    globals = { "Chainsaw", "vim" },
                },
            },
        },
    }
<

>jsonc
    // Option 2: .luarc.json
    {
        "diagnostics": {
            "globals": ["Chainsaw", "vim"],
        },
    }
<

>lua
    -- Option 3: lazydev.nvim
    opts = {
        library = {
            { path = "nvim-chainsaw", words = { "Chainsaw" } },
        },
    },
<


MAKE THE FORMATTER IGNORE THE LOG STATEMENTS ~

A common problem is that formatters like `prettier` split up the log statements
into multiple lines, making them hard to read and breaking `.removeLogs()`,
which relies on each line containing the marker emoji.

The simplest method to deal with this is to customize the log statement in your
configuration to include an ignore-comment: `/* prettier-ignore */` (and add
the marker to it as well, so it is included in the removal by `.removeLogs()`.)

>lua
    require("chainsaw").setup {
        logStatements = {
            variableLog = {
                javascript = {
                    "/* prettier-ignore */ // {{marker}}", -- <- adding this
                    'console.log("{{marker}} {{var}}:", {{var}});',
                },
            },
        },
    }
<


STATUSLINE ~

This function returns number of log statements _by nvim-chainsaw_ in the
current buffer.

>lua
    require("chainsaw.visuals.statusline").countInBuffer()
<


SIMILAR PLUGINS                 *nvim-chainsaw-nvim-chainsaw--similar-plugins*

- debugprint.nvim <https://github.com/andrewferrier/debugprint.nvim>
- refactoring.nvim <https://github.com/ThePrimeagen/refactoring.nvim#debug-features>
- timber-.nvim <https://github.com/Goose97/timber.nvim>


ABOUT THE DEVELOPER         *nvim-chainsaw-nvim-chainsaw--about-the-developer*

In my day job, I am a sociologist studying the social mechanisms underlying the
digital economy. For my PhD project, I investigate the governance of the app
economy and how software ecosystems manage the tension between innovation and
compatibility. If you are interested in this subject, feel free to get in
touch.

I also occasionally blog about vim: Nano Tips for Vim
<https://nanotipsforvim.prose.sh>

- Website <https://chris-grieser.de/>
- Mastodon <https://pkm.social/@pseudometa>
- ResearchGate <https://www.researchgate.net/profile/Christopher-Grieser>
- LinkedIn <https://www.linkedin.com/in/christopher-grieser-ba693b17a/>



Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
